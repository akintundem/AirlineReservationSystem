package com.example.skylink.persistence.Implementations.hsqldb;

import com.example.skylink.objects.Implementations.BookingInfo;
import com.example.skylink.objects.Interfaces.iBookingInfo;
import com.example.skylink.objects.Interfaces.iFlight;
import com.example.skylink.objects.Interfaces.iFlightInfo;
import com.example.skylink.persistence.Interfaces.iFlightBookingDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class FlightBookingHSQLDB implements iFlightBookingDB {
    private final String dbPath;
    private final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS FLIGHTBOOKINGS ("
            + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
            + "flightID VARCHAR(10) NOT NULL,"
            + "userID INT NOT NULL,"
            + "direction VARCHAR(10) NOT NULL,"
            + "price INT NOT NULL,"
            + "paid BOOLEAN NOT NULL,"
            + "bookingNumber VARCHAR(5) NOT NULL,"
            + "bagCount INT,"
            + "petCount INT,"
            + "wifiOption INT,"
            + "wheelchairOption INT,"
            + "FOREIGN KEY (userID) REFERENCES USER (id)"
            + ")";


    public FlightBookingHSQLDB(String dbPath) {
        this.dbPath = dbPath;
    }

    private Connection connect() throws SQLException {
        return DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath + ";shutdown=true", "SA", "");
    }

    public long addFlightBooking(long user_id, String bound, iFlight flight, int price, String bookingNumber, String econBusiness, int bagCount, int petCount, int wifiOption, int wheelchairOption) {
        String sql = "INSERT INTO FLIGHTBOOKINGS (flightID, userID, direction, price, paid, econBus, bookingNumber, bagCount, petCount, wifiOption, wheelchairOption) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = connect();
             PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            ps.setString(1, flight.getFlightNumber());
            ps.setLong(2, user_id);
            ps.setString(3, bound);
            ps.setInt(4, price);
            ps.setBoolean(5, true);
            ps.setString(6, econBusiness);
            ps.setString(7, bookingNumber);
            ps.setInt(8, bagCount);
            ps.setInt(9, petCount);
            ps.setInt(10, wifiOption);
            ps.setInt(11, wheelchairOption);

            int affectedRows = ps.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating flight booking failed, no rows affected.");
            }

            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getLong(1); // Return the generated ID
                } else {
                    throw new SQLException("Creating flight booking failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    public List<iBookingInfo> getBookingInfoByUserId(long userId) {
        List<iBookingInfo> bookingInfoList = new ArrayList<>();

        String sql = "SELECT id, bookingNumber, econBus, direction, bagCount, petCount, wifiOption, wheelchairOption FROM FLIGHTBOOKINGS WHERE userID = ?";

        try (Connection conn = connect();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setLong(1, userId);

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    long id = rs.getLong("id");
                    String flightID = rs.getString("bookingNumber");
                    String econBus = rs.getString("econBus");
                    String direction = rs.getString("direction");
                    int bagCount = rs.getInt("bagCount");
                    int petCount = rs.getInt("petCount");
                    int wifiOption = rs.getInt("wifiOption");
                    int wheelchairOption = rs.getInt("wheelchairOption");

                    // Create a BookingInfo object and add it to the main list
                    iBookingInfo bookingInfo = new BookingInfo(id, flightID,econBus,direction, bagCount, petCount, wifiOption, wheelchairOption);
                    bookingInfoList.add(bookingInfo);
                }
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return bookingInfoList;
    }



    public List<String> getFlightsByUserId(String direction, String bookingNumberByUserId) {
        List<String> flightIDs = new ArrayList<>();
        String sql = "SELECT flightID FROM FLIGHTBOOKINGS WHERE direction = ? AND bookingNumber = ?";

        try (Connection conn = connect();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, direction);
            ps.setString(2, bookingNumberByUserId);

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String flightID = rs.getString("flightID");
                    flightIDs.add(flightID);
                }
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return flightIDs;
    }



    public iFlightBookingDB initialize() {
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(CREATE_TABLE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

    public iFlightBookingDB drop() {
        String sql = "DROP TABLE FLIGHTBOOKINGS";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

}
